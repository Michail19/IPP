/*
 * GamerHub Store API
 * API for an online computer game store. Allows browsing games, user registration, and purchasing.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Game;
import org.openapitools.client.model.GameCreate;
import org.openapitools.client.model.GameUpdate;
import org.openapitools.client.model.GamesGameIdGet404Response;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GamesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GamesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GamesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for gamesGameIdDelete
     * @param gameId ID of the game to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Game successfully deleted (no content returned) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Missing or invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - User is not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Game not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesGameIdDeleteCall(Long gameId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/{gameId}"
            .replace("{" + "gameId" + "}", localVarApiClient.escapeString(gameId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesGameIdDeleteValidateBeforeCall(Long gameId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling gamesGameIdDelete(Async)");
        }

        return gamesGameIdDeleteCall(gameId, _callback);

    }

    /**
     * Delete a game from the catalog (Admin only)
     * Deletes a specific game by ID. Requires admin privileges.
     * @param gameId ID of the game to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Game successfully deleted (no content returned) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Missing or invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - User is not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Game not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public void gamesGameIdDelete(Long gameId) throws ApiException {
        gamesGameIdDeleteWithHttpInfo(gameId);
    }

    /**
     * Delete a game from the catalog (Admin only)
     * Deletes a specific game by ID. Requires admin privileges.
     * @param gameId ID of the game to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Game successfully deleted (no content returned) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Missing or invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - User is not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Game not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gamesGameIdDeleteWithHttpInfo(Long gameId) throws ApiException {
        okhttp3.Call localVarCall = gamesGameIdDeleteValidateBeforeCall(gameId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a game from the catalog (Admin only) (asynchronously)
     * Deletes a specific game by ID. Requires admin privileges.
     * @param gameId ID of the game to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Game successfully deleted (no content returned) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Missing or invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - User is not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Game not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesGameIdDeleteAsync(Long gameId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesGameIdDeleteValidateBeforeCall(gameId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesGameIdGet
     * @param gameId Numeric ID of the game to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. Game found and returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Invalid ID supplied (e.g., not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Game not found. No game exists with the provided ID. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesGameIdGetCall(Long gameId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/{gameId}"
            .replace("{" + "gameId" + "}", localVarApiClient.escapeString(gameId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesGameIdGetValidateBeforeCall(Long gameId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling gamesGameIdGet(Async)");
        }

        return gamesGameIdGetCall(gameId, _callback);

    }

    /**
     * Get a game by its ID
     * Returns detailed information about a single game.
     * @param gameId Numeric ID of the game to retrieve. (required)
     * @return Game
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. Game found and returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Invalid ID supplied (e.g., not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Game not found. No game exists with the provided ID. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Game gamesGameIdGet(Long gameId) throws ApiException {
        ApiResponse<Game> localVarResp = gamesGameIdGetWithHttpInfo(gameId);
        return localVarResp.getData();
    }

    /**
     * Get a game by its ID
     * Returns detailed information about a single game.
     * @param gameId Numeric ID of the game to retrieve. (required)
     * @return ApiResponse&lt;Game&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. Game found and returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Invalid ID supplied (e.g., not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Game not found. No game exists with the provided ID. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Game> gamesGameIdGetWithHttpInfo(Long gameId) throws ApiException {
        okhttp3.Call localVarCall = gamesGameIdGetValidateBeforeCall(gameId, null);
        Type localVarReturnType = new TypeToken<Game>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a game by its ID (asynchronously)
     * Returns detailed information about a single game.
     * @param gameId Numeric ID of the game to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. Game found and returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Invalid ID supplied (e.g., not a number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Game not found. No game exists with the provided ID. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesGameIdGetAsync(Long gameId, final ApiCallback<Game> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesGameIdGetValidateBeforeCall(gameId, _callback);
        Type localVarReturnType = new TypeToken<Game>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesGameIdPut
     * @param gameId ID of the game to update (required)
     * @param gameUpdate Updated game object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Game successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input or ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Missing or invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - User is not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Game not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesGameIdPutCall(Long gameId, GameUpdate gameUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gameUpdate;

        // create path and map variables
        String localVarPath = "/games/{gameId}"
            .replace("{" + "gameId" + "}", localVarApiClient.escapeString(gameId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesGameIdPutValidateBeforeCall(Long gameId, GameUpdate gameUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling gamesGameIdPut(Async)");
        }

        // verify the required parameter 'gameUpdate' is set
        if (gameUpdate == null) {
            throw new ApiException("Missing the required parameter 'gameUpdate' when calling gamesGameIdPut(Async)");
        }

        return gamesGameIdPutCall(gameId, gameUpdate, _callback);

    }

    /**
     * Update an existing game (Admin only)
     * Updates the details of a specific game by ID. Requires admin privileges.
     * @param gameId ID of the game to update (required)
     * @param gameUpdate Updated game object (required)
     * @return Game
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Game successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input or ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Missing or invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - User is not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Game not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public Game gamesGameIdPut(Long gameId, GameUpdate gameUpdate) throws ApiException {
        ApiResponse<Game> localVarResp = gamesGameIdPutWithHttpInfo(gameId, gameUpdate);
        return localVarResp.getData();
    }

    /**
     * Update an existing game (Admin only)
     * Updates the details of a specific game by ID. Requires admin privileges.
     * @param gameId ID of the game to update (required)
     * @param gameUpdate Updated game object (required)
     * @return ApiResponse&lt;Game&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Game successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input or ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Missing or invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - User is not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Game not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Game> gamesGameIdPutWithHttpInfo(Long gameId, GameUpdate gameUpdate) throws ApiException {
        okhttp3.Call localVarCall = gamesGameIdPutValidateBeforeCall(gameId, gameUpdate, null);
        Type localVarReturnType = new TypeToken<Game>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing game (Admin only) (asynchronously)
     * Updates the details of a specific game by ID. Requires admin privileges.
     * @param gameId ID of the game to update (required)
     * @param gameUpdate Updated game object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Game successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input or ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Missing or invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - User is not an admin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Game not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesGameIdPutAsync(Long gameId, GameUpdate gameUpdate, final ApiCallback<Game> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesGameIdPutValidateBeforeCall(gameId, gameUpdate, _callback);
        Type localVarReturnType = new TypeToken<Game>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesGet
     * @param genre Filter games by genre (e.g., &#39;RPG&#39;, &#39;Action&#39;) (optional)
     * @param developer Filter games by developer name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesGetCall(String genre, String developer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (genre != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("genre", genre));
        }

        if (developer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("developer", developer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesGetValidateBeforeCall(String genre, String developer, final ApiCallback _callback) throws ApiException {
        return gamesGetCall(genre, developer, _callback);

    }

    /**
     * Get a list of all games
     * Returns a list of games, optionally filtered by genre or developer.
     * @param genre Filter games by genre (e.g., &#39;RPG&#39;, &#39;Action&#39;) (optional)
     * @param developer Filter games by developer name (optional)
     * @return List&lt;Game&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public List<Game> gamesGet(String genre, String developer) throws ApiException {
        ApiResponse<List<Game>> localVarResp = gamesGetWithHttpInfo(genre, developer);
        return localVarResp.getData();
    }

    /**
     * Get a list of all games
     * Returns a list of games, optionally filtered by genre or developer.
     * @param genre Filter games by genre (e.g., &#39;RPG&#39;, &#39;Action&#39;) (optional)
     * @param developer Filter games by developer name (optional)
     * @return ApiResponse&lt;List&lt;Game&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Game>> gamesGetWithHttpInfo(String genre, String developer) throws ApiException {
        okhttp3.Call localVarCall = gamesGetValidateBeforeCall(genre, developer, null);
        Type localVarReturnType = new TypeToken<List<Game>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of all games (asynchronously)
     * Returns a list of games, optionally filtered by genre or developer.
     * @param genre Filter games by genre (e.g., &#39;RPG&#39;, &#39;Action&#39;) (optional)
     * @param developer Filter games by developer name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesGetAsync(String genre, String developer, final ApiCallback<List<Game>> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesGetValidateBeforeCall(genre, developer, _callback);
        Type localVarReturnType = new TypeToken<List<Game>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesPost
     * @param gameCreate Game object that needs to be added to the store (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Game successfully created </td><td>  * Location - URL of the created game <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Missing or invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - User is not an admin </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesPostCall(GameCreate gameCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gameCreate;

        // create path and map variables
        String localVarPath = "/games";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesPostValidateBeforeCall(GameCreate gameCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gameCreate' is set
        if (gameCreate == null) {
            throw new ApiException("Missing the required parameter 'gameCreate' when calling gamesPost(Async)");
        }

        return gamesPostCall(gameCreate, _callback);

    }

    /**
     * Add a new game to the store (Admin only)
     * Creates a new game in the catalog. Requires admin privileges. 
     * @param gameCreate Game object that needs to be added to the store (required)
     * @return Game
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Game successfully created </td><td>  * Location - URL of the created game <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Missing or invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - User is not an admin </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public Game gamesPost(GameCreate gameCreate) throws ApiException {
        ApiResponse<Game> localVarResp = gamesPostWithHttpInfo(gameCreate);
        return localVarResp.getData();
    }

    /**
     * Add a new game to the store (Admin only)
     * Creates a new game in the catalog. Requires admin privileges. 
     * @param gameCreate Game object that needs to be added to the store (required)
     * @return ApiResponse&lt;Game&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Game successfully created </td><td>  * Location - URL of the created game <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Missing or invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - User is not an admin </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Game> gamesPostWithHttpInfo(GameCreate gameCreate) throws ApiException {
        okhttp3.Call localVarCall = gamesPostValidateBeforeCall(gameCreate, null);
        Type localVarReturnType = new TypeToken<Game>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new game to the store (Admin only) (asynchronously)
     * Creates a new game in the catalog. Requires admin privileges. 
     * @param gameCreate Game object that needs to be added to the store (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Game successfully created </td><td>  * Location - URL of the created game <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Missing or invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - User is not an admin </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesPostAsync(GameCreate gameCreate, final ApiCallback<Game> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesPostValidateBeforeCall(gameCreate, _callback);
        Type localVarReturnType = new TypeToken<Game>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
